datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

model Genre {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name      String   @unique

  categories Category[]
}

model Category {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name      String   @unique
  isDraft   Boolean  @default(true)

  genre   Genre  @relation(fields: [genreId], references: [id])
  genreId String

  users CategoryOnUser[]
}

model CategoryOnUser {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  status     String?
  isPublic   Boolean  @default(false)

  @@unique([userId, categoryId])
}

model User {
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  id            String           @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name          String?
  screenName    String?
  email         String?
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean          @default(false)
  accounts      Account[]
  sessions      Session[]
  categories    CategoryOnUser[]
}

//
// Authentication
//

model Account {
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  id                 String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  id           String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
